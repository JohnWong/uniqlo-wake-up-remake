/* Generated by RuntimeBrowser
   Image: /var/containers/Bundle/Application/A77617CC-81F8-4D57-BCE6-77E8D969EEA1/UniqloWakeUp.app/UniqloWakeUp
 */

@interface AFURLConnectionOperation : NSOperation <NSCoding, NSCopying, NSURLConnectionDataDelegate, NSURLConnectionDelegate> {
    int  _SSLPinningMode;
    bool  _allowsInvalidSSLCertificate;
    id  _authenticationChallenge;
    unsigned long long  _backgroundTaskIdentifier;
    id  _cacheResponse;
    bool  _cancelled;
    NSURLConnection * _connection;
    NSURLCredential * _credential;
    id  _downloadProgress;
    NSError * _error;
    NSRecursiveLock * _lock;
    NSOutputStream * _outputStream;
    id  _redirectResponse;
    NSURLRequest * _request;
    NSURLResponse * _response;
    NSData * _responseData;
    NSString * _responseString;
    unsigned long long  _responseStringEncoding;
    NSSet * _runLoopModes;
    bool  _shouldUseCredentialStorage;
    short  _state;
    long long  _totalBytesRead;
    id  _uploadProgress;
    NSDictionary * _userInfo;
}

@property (nonatomic, readwrite) int SSLPinningMode;
@property (nonatomic, readwrite) bool allowsInvalidSSLCertificate;
@property (nonatomic, readwrite, copy) id authenticationChallenge;
@property (nonatomic, readwrite) unsigned long long backgroundTaskIdentifier;
@property (nonatomic, readwrite, copy) id cacheResponse;
@property (getter=isCancelled, nonatomic, readwrite) bool cancelled;
@property (nonatomic, readwrite, retain) NSURLConnection *connection;
@property (nonatomic, readwrite, retain) NSURLCredential *credential;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (nonatomic, readwrite, copy) id downloadProgress;
@property (nonatomic, readwrite, retain) NSError *error;
@property (atomic, readonly) unsigned long long hash;
@property (nonatomic, readwrite, retain) NSInputStream *inputStream;
@property (nonatomic, readwrite, retain) NSRecursiveLock *lock;
@property (nonatomic, readwrite, retain) NSOutputStream *outputStream;
@property (nonatomic, readwrite, copy) id redirectResponse;
@property (nonatomic, readwrite, retain) NSURLRequest *request;
@property (nonatomic, readwrite, retain) NSURLResponse *response;
@property (nonatomic, readwrite, retain) NSData *responseData;
@property (nonatomic, readwrite, copy) NSString *responseString;
@property (nonatomic, readwrite) unsigned long long responseStringEncoding;
@property (nonatomic, readwrite, retain) NSSet *runLoopModes;
@property (nonatomic, readwrite) bool shouldUseCredentialStorage;
@property (nonatomic, readwrite) short state;
@property (atomic, readonly) Class superclass;
@property (nonatomic, readwrite) long long totalBytesRead;
@property (nonatomic, readwrite, copy) id uploadProgress;
@property (nonatomic, readwrite, retain) NSDictionary *userInfo;

+ (id)networkRequestThread;
+ (void)networkRequestThreadEntryPoint:(id)arg1;
+ (id)pinnedCertificates;
+ (id)pinnedPublicKeys;

- (void).cxx_destruct;
- (int)SSLPinningMode;
- (bool)allowsInvalidSSLCertificate;
- (id)authenticationChallenge;
- (unsigned long long)backgroundTaskIdentifier;
- (id)cacheResponse;
- (void)cancel;
- (void)cancelConnection;
- (id)connection;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 didSendBodyData:(long long)arg2 totalBytesWritten:(long long)arg3 totalBytesExpectedToWrite:(long long)arg4;
- (id)connection:(id)arg1 willCacheResponse:(id)arg2;
- (id)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
- (void)connection:(id)arg1 willSendRequestForAuthenticationChallenge:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (bool)connectionShouldUseCredentialStorage:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)credential;
- (void)dealloc;
- (id)description;
- (id)downloadProgress;
- (void)encodeWithCoder:(id)arg1;
- (id)error;
- (void)finish;
- (id)initWithCoder:(id)arg1;
- (id)initWithRequest:(id)arg1;
- (id)inputStream;
- (bool)isCancelled;
- (bool)isConcurrent;
- (bool)isExecuting;
- (bool)isFinished;
- (bool)isPaused;
- (bool)isReady;
- (id)lock;
- (void)operationDidStart;
- (id)outputStream;
- (void)pause;
- (id)redirectResponse;
- (id)request;
- (id)response;
- (id)responseData;
- (id)responseString;
- (unsigned long long)responseStringEncoding;
- (void)resume;
- (id)runLoopModes;
- (void)setAllowsInvalidSSLCertificate:(bool)arg1;
- (void)setAuthenticationChallenge:(id)arg1;
- (void)setBackgroundTaskIdentifier:(unsigned long long)arg1;
- (void)setCacheResponse:(id)arg1;
- (void)setCacheResponseBlock:(id)arg1;
- (void)setCancelled:(bool)arg1;
- (void)setCompletionBlock:(id)arg1;
- (void)setConnection:(id)arg1;
- (void)setCredential:(id)arg1;
- (void)setDownloadProgress:(id)arg1;
- (void)setDownloadProgressBlock:(id)arg1;
- (void)setError:(id)arg1;
- (void)setInputStream:(id)arg1;
- (void)setLock:(id)arg1;
- (void)setOutputStream:(id)arg1;
- (void)setRedirectResponse:(id)arg1;
- (void)setRedirectResponseBlock:(id)arg1;
- (void)setRequest:(id)arg1;
- (void)setResponse:(id)arg1;
- (void)setResponseData:(id)arg1;
- (void)setResponseString:(id)arg1;
- (void)setResponseStringEncoding:(unsigned long long)arg1;
- (void)setRunLoopModes:(id)arg1;
- (void)setSSLPinningMode:(int)arg1;
- (void)setShouldExecuteAsBackgroundTaskWithExpirationHandler:(id)arg1;
- (void)setShouldUseCredentialStorage:(bool)arg1;
- (void)setState:(short)arg1;
- (void)setTotalBytesRead:(long long)arg1;
- (void)setUploadProgress:(id)arg1;
- (void)setUploadProgressBlock:(id)arg1;
- (void)setUserInfo:(id)arg1;
- (void)setWillSendRequestForAuthenticationChallengeBlock:(id)arg1;
- (bool)shouldUseCredentialStorage;
- (void)start;
- (short)state;
- (long long)totalBytesRead;
- (id)uploadProgress;
- (id)userInfo;

@end
